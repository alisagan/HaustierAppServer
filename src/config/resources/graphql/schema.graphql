# Copyright (C) 2021 - present Juergen Zimmermann, Hochschule Karlsruhe
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# siehe app.module.ts

schema {
  query: Query
  mutation: Mutation
}

"Funktionen, um Haustierdaten zu lesen"
type Query {
  haustiere(suchkriterien: SuchkriterienInput): [Haustier!]

  haustier(id: ID!): Haustier
}

"Funktionen, um Haustiere neu anzulegen, zu aktualisieren oder zu löschen"
type Mutation {
  create(input: HaustierInput!): CreatePayload

  update(input: HaustierUpdateInput!): UpdatePayload

  delete(id: ID!): Boolean

  # Mutation, wenn z.B. der Login-Zeitpunkt im IDM-System gespeichert wird
  token(username: String!, password: String!): TokenResult
  refresh(refresh_token: String!): TokenResult
}

"Daten zur Beschreibung eines Haustiers"
type Beschreibung {
  beschreibung: String!
  haltungshinweise: String
}

"Daten zum Foto eines Haustiers"
type Foto {
  beschriftung: String!
  contentType: String
}

"Datenschema zu einem Haustier, das gelesen wird"
type Haustier {
  # ID ist bei Apollo ein String
  id: Int!
  version: Int!
  name: String!
  alter: Int
  art: Art
  gewicht: Float!
  groesse: Float
  vermittelt: Boolean
  aufnahmedatum: String
  rasse: String
  schlagwoerter: [String]
  # 1:1-Beziehung
  beschreibung: Beschreibung!
}

"Enum-Typ für die Art eines Haustiers"
enum Art {
  HUND
  KATZE
  KLEINTIER
}

"Suchkriterien für Haustiere"
input SuchkriterienInput {
  beschreibung: String
  name: String
  alter: Int
  art: Art
  vermittelt: Boolean
}

"Daten zur Beschreibung eines neuen Haustiers"
input BeschreibungInput {
  beschreibung: String!
  haltungshinweise: String
}

"Daten zu den Fotos eines Haustiers"
input FotoInput {
  beschriftung: String!
  contentType: String!
}

"Daten für ein neues Haustier"
input HaustierInput {
  name: String
  alter: Int
  art: Art
  gewicht: Float
  groesse: Float
  vermittelt: Boolean
  aufnahmedatum: String
  rasse: String
  schlagwoerter: [String]
  beschreibung: BeschreibungInput!
  fotos: [FotoInput!]
}

type CreatePayload {
  id: Int
}

"Daten für ein zu änderndes Haustier"
input HaustierUpdateInput {
  id: ID
  version: Int
  name: String
  alter: Int
  art: Art
  gewicht: Float
  groesse: Float
  vermittelt: Boolean
  aufnahmedatum: String
  rasse: String
  schlagwoerter: [String]
}

type UpdatePayload {
  version: Int
}

type TokenResult {
  access_token: String!
  expires_in: Int!
  refresh_token: String!
  refresh_expires_in: Int!
}
