@startuml Controller-Klasse

interface Promise<T>

package @nestjs/graphql {
  class "@Resolver" as Resolver
  hide Resolver circle

  class "@Mutation" as Mutation
  hide Mutation circle

  class "@Args" as Args
  hide Args circle
}

package @nestjs/common {
  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle

  class "@UseFilters" as UseFilters
  hide UseFilters circle

  class "@UseGuards" as UseGuards
  hide UseGuards circle
}

package nest-keycloak-connect {
  class AuthGuard

  class "@Roles" as Roles
  hide Roles circle
}

package haustier {
  package entity {
    class Haustier <<entity>>
  }

  package service #FFFFFF {
    class HaustierWriteService << control >>
  }

  package controller #FFFFFF {
    class HaustierDTO <<dto>>
  }

  package resolver #DDDDDD{
    interface IdInput {
      id: number
    }

    class HaustierMutationResolver  << control >> << @Resolver() >> << @UseGuards() >> << @UseFilters() >> << @UseInterceptors() >> {
      + @Mutation() @Roles() async create(@Args() haustierDTO: HaustierDTO): Promise<CreatePayload>
      + @Mutation() @Roles() async update(@Args() haustierDTO: HaustierDTO): Promise<UpdatePayload>
      + @Mutation() @Roles() async delete(@Args() id: IdInput): Promise<boolean>
    }
  }
  
  HaustierMutationResolver o-down-> "1" HaustierWriteService : service

  HaustierMutationResolver ..> Haustier
  HaustierMutationResolver ..> HaustierDTO
  HaustierMutationResolver ..> IdInput
  HaustierDTO .up.> Haustier
  HaustierMutationResolver ..> Promise
  HaustierMutationResolver .up.> Resolver
  HaustierMutationResolver .up.> UseInterceptors

  HaustierMutationResolver .up.> AuthGuard
  HaustierMutationResolver .up.> Roles

  HaustierDTO .[hidden].> Promise
  HaustierDTO .[hidden].> Resolver
}

hide empty members

footer (c) Alisa Ganter

@enduml
